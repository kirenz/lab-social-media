---
title: "Social Media Report"
lang: de
subtitle: "Winterkampagne 2023"
execute:
  echo: false 
  warning: false
format:
  revealjs: 
    theme: simple
    css: custom-styles.css 
---


```{python}
# | include: False

# Bibliothken importieren
import pandas as pd
import altair as alt
from urllib import request
import json
```

```{python}
# | include: False

# Deutsche Formatvorlagen für Altair

with request.urlopen('https://raw.githubusercontent.com/d3/d3-format/master/locale/de-DE.json') as f:
    de_format = json.load(f)
with request.urlopen('https://raw.githubusercontent.com/d3/d3-time-format/master/locale/de-DE.json') as f:
    de_time_format = json.load(f)

alt.renderers.set_embed_options(
    formatLocale=de_format, timeFormatLocale=de_time_format)
```


```{python}
# | include: False

# Daten

# Daten importieren
df = pd.read_csv(
    "https://raw.githubusercontent.com/kirenz/datasets/master/facebook-ad-data.csv", decimal=',')

# Auswahl der Kampagnen anhand der Id
KAMPAGNEN = [344, 375]
df = df[df['Id'].isin(KAMPAGNEN)]

# Daten anpassen
df['Plattform'] = df['Plattform'].astype('category')

```

```{python}
# Eingabe von Daten aus Meta
TOTAL_FOLLOWERS = 400000
NEW_NET_FOLLOWERS = 250
TOTAL_AUDIENCE = 10000000
```

```{python}
# Berechnung einiger Kennzahlen

# AWARENESS KENNZAHLEN
PUBLIKUMS_WACHSTUMSRATE = (NEW_NET_FOLLOWERS / TOTAL_AUDIENCE) * 100
POST_REICHWEITE = (df['Reichweite'] / TOTAL_FOLLOWERS) * 100

# ENGAGEMENT KENNZAHLEN
DURCH_ENGAGEMENT = (df['Beitragsinteraktionen'] / TOTAL_FOLLOWERS) * 100
AMPLIFIKATION = (df['Geteilte Beiträge'] / TOTAL_FOLLOWERS) * 100
KONVERSATION = (df['Beitragskommentare'] / TOTAL_FOLLOWERS) * 100

# CONERSION KENNZAHLEN
CTR = df['CTR (Link-Klickrate)']
CPC = df['CPC (alle) (EUR)']
CONVERSION = df['Ergebnisrate']
TKP = df['Kosten pro 1.000 erreichten Personen (EUR)']
CPM = df['CPM (Kosten pro 1.000 Impressionen) (EUR)']

```

```{python}
# Kennzahlen

ALLGEMEIN = ['Reichweite', 'Impressionen', 'Seiteninteraktionen',


             '„Gefällt mir“-Angaben für Seite', 'Beitragsreaktionen']

PERFORMANCE = ['Ausgegebener Betrag (EUR)', 'Klicks (alle)',
               'CPC (alle) (EUR)', 'CTR (alle)']



```

```{python}

# Funktion für das Ausgabeformat der Pandas-Tabellen
def make_pretty(styler):
    styler.format(precision=0, thousands=".", decimal=",")
    return styler

```

# Einführung    

## Kontext

*Aktuelle Situation. Weshalb wurde die Kampagne erstellt?* 

## Kampagnenziele

*Konkrete Ziele der Kampagne (SMART)*

## Zielgruppe

![](../images/user-persona.png)

## Kampagnenüberblick

![](../images/facebook-ad-hello.png)

- Beispiele für Werbeanzeigen, Bilder, Videos oder Texte.
- Erklärung, warum diese Inhalte ausgewählt wurden und wie sie zur Zielgruppe passen.



## Budget und Zeitraum

- Gesamtbudget für die Kampagne.
- Tägliches Budget oder Budgetverteilung.
- Zeitraum der Kampagne.
- Art der Werbeanzeigen (z.B. Video, Bild, Karussell).
- Platzierung der Anzeigen (z.B. News Feed, Stories, rechte Spalte).

# Kampagnen-Erfolgsübersicht


## Reichweite


```{python}
df[['Ausgegebener Betrag (EUR)', 'Reichweite', 'Kosten pro 1.000 erreichten Personen (EUR)']].sort_values(
    by=['Reichweite'], ascending=False).round(0).style.pipe(make_pretty)
```


## Impressionen


```{python}
df[['Ausgegebener Betrag (EUR)', 'Impressionen', 'CPM (Kosten pro 1.000 Impressionen) (EUR)']].sort_values(
    by=['Impressionen'], ascending=False).round(0).style.pipe(make_pretty)
```



```{python}
df[['Reichweite', 'Impressionen', 'Seiteninteraktionen', '„Gefällt mir“-Angaben für Seite', 'Beitragsreaktionen']].sort_values(
    by=['Reichweite'], ascending=False).round(0).style.pipe(make_pretty)
```



## Gesamtübersicht

```{python}
df.groupby('Plattform')[['Reichweite', 'Impressionen']
                        ].sum().sort_values(by=['Reichweite'], ascending=False).round(0).style.pipe(make_pretty)


```

## Durchschnittliche Impressionen


```{python}

df_mean = (
    df.groupby("Plattform")["Impressionen"].mean().rename(
        "mean_imp").reset_index()
)


chart = alt.Chart(df_mean).mark_bar().encode(
    x=alt.X('mean_imp').axis(
        title="Durchschnittliche Impressionen",
        titleAnchor="start"),
    y=alt.Y('Plattform', sort='-x').axis(title=None)
).properties(
    width=850,
    height=450
).configure_axis(
    labelFontSize=16,
    titleFontSize=20,
    grid=False
).configure_view(strokeOpacity=0)

chart

```